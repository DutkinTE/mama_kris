import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';
import 'package:mama_kris/utils/funcs.dart' as funcs;
import 'register_confidentiality_sheet.dart';
import 'register_contacts_sheet.dart';
import 'register_code_sheet.dart';
import 'register_role_sheet.dart';

import 'package:mama_kris/constants/api_constants.dart';
import 'monetization_screen.dart';
import 'monetization_banner_screen.dart';

/// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ SnackBar –∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª.
void showSnack(BuildContext context, String message) {
  // print(message);
  ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text(message)));
}

/// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ email.
/// –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω (201), –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –∏–Ω–∞—á–µ ‚Äì false.
Future<bool> sendVerificationCodeFunction(
  BuildContext context,
  String email,
) async {
  if (email.isEmpty) {
    showSnack(context, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ email');
    return false;
  }
  try {
    final response = await http.post(
      Uri.parse('${kBaseUrl}auth/check-email'),
      headers: {'Content-Type': 'application/json'},
      body: jsonEncode({'email': email}),
    );
    if (response.statusCode == 201) {
      showSnack(context, '–ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à email');
      return true;
    } else if (response.statusCode == 409) {
      showSnack(context, '–≠—Ç–æ—Ç email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è');
      return false;
    } else {
      showSnack(context, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞');
      return false;
    }
  } catch (e) {
    showSnack(
      context,
      'sendVerificationCodeFunction: –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É',
    );
    return false;
  }
}

/// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏.
/// –ï—Å–ª–∏ –∫–æ–¥ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π (201), –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–∫–µ–Ω, –∏–Ω–∞—á–µ ‚Äì null.
Future<String?> verifyCodeFunction(
  BuildContext context,
  String email,
  String codeText,
) async {
  if (codeText.isEmpty) {
    showSnack(context, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏');
    return null;
  }
  try {
    final response = await http.post(
      Uri.parse('${kBaseUrl}auth/verify-code'),
      headers: {'Content-Type': 'application/json'},
      body: jsonEncode({
        'email': email,
        'verificationCode': int.parse(codeText),
      }),
    );
    if (response.statusCode == 201) {
      final responseData = jsonDecode(response.body);
      return responseData['token'];
    } else {
      showSnack(context, '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏');
      return null;
    }
  } catch (e) {
    showSnack(
      context,
      'verifyCodeFunction: –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É',
    );
    return null;
  }
}

/// –§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
/// –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä email, displayName –∏ password.
/// –ü—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–∫–µ–Ω—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –∏–Ω–∞—á–µ ‚Äì false.
Future<bool> registerFunction(
  BuildContext context,
  String verificationToken,
  String email,
  String displayName,
  String password,
  String phone,
) async {
  try {
    final url = Uri.parse('${kBaseUrl}auth/register');
    final headers = {
      'Content-Type': 'application/json',
      'Authorization': 'Bearer $verificationToken',
    };
    final body = jsonEncode({
      'email': email,
      'password': password,
      'phone': phone,
      'name': displayName,
    });

    // print("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:");
    // print("‚û°Ô∏è URL: $url");
    // print("‚û°Ô∏è Headers: $headers");
    // print("‚û°Ô∏è Body: $body");

    final response = await http.post(url, headers: headers, body: body);

    // print("üì• –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:");
    // print("‚û°Ô∏è Status: ${response.statusCode}");
    // print("‚û°Ô∏è Body: ${response.body}");

    if (response.statusCode == 201) {
      final responseData = jsonDecode(response.body);
      final prefs = await SharedPreferences.getInstance();

      await prefs.setString('auth_token', responseData['accessToken']);
      await prefs.setString('refresh_token', responseData['refreshToken']);
      await prefs.setInt('user_id', responseData['userId']);
      await prefs.setBool('isLoggedIn', true);
      await prefs.setString('current_page', 'choice');
      await prefs.setInt('viewed_count', 0);
      await prefs.setInt('liked_count', 0);

      // üß† –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ API
      await funcs.updateUserDataInCache(
        responseData['accessToken'],
        responseData['userId'],
      );
      await funcs.startSession(
        responseData['userId'],
        responseData['accessToken'],
      );

      // print("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ");
      return true;
    } else {
      showSnack(
        context,
        '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞',
      );
      return false;
    }
  } catch (e) {
    // print("üö® –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: $e");
    showSnack(
      context,
      'registerFunction: –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç',
    );
    return false;
  }
}

/// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ä–æ–ª—å).
Future<http.Response> _makeApiRequest(
  String choice,
  String? accessToken,
  int userId,
) async {
  final url = '${kBaseUrl}users/$userId/update-info';
  final headers = {
    'Authorization': 'Bearer $accessToken',
    'Content-Type': 'application/json',
  };
  final body = jsonEncode({'choice': choice});
  return await http.put(Uri.parse(url), headers: headers, body: body);
}

/// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏.
/// –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–µ–∫—É—â–µ–π –ª–æ–≥–∏–∫–∏.
Future<void> _navigateToChoice(
  String choice,
  SharedPreferences prefs,
  BuildContext context,
) async {
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è current_page –ø–æ –≤—ã–±–æ—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
  // final Widget targetPage =
  //     (choice == 'Looking for job') ? ApplicationScreen() : OrderScreen();
  final Widget targetPage = (choice == 'Looking for job')
      ? MonetizationScreen()
      : MonetizationBannerScreen();
  final String currentPage = (choice == 'Looking for job') ? 'search' : 'job';

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à
  await prefs.setString('current_page', currentPage);

  // –ù–∞–≤–∏–≥–∞—Ü–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º PageRouteBuilder
  Navigator.push(
    context,
    PageRouteBuilder(
      transitionDuration: const Duration(milliseconds: 300),
      pageBuilder: (context, animation, secondaryAnimation) => targetPage,
      transitionsBuilder: (context, animation, secondaryAnimation, child) {
        final tween = Tween<Offset>(
          begin: const Offset(1.0, 0.0),
          end: Offset.zero,
        );
        final offsetAnimation = animation.drive(tween);
        return SlideTransition(position: offsetAnimation, child: child);
      },
    ),
  );
}

Future<void> updateChoice(String choice, BuildContext context) async {
  try {
    final prefs = await SharedPreferences.getInstance();
    String? accessToken = prefs.getString('auth_token');
    int? userId = prefs.getInt('user_id');
    if (userId == null) {
      throw Exception('User ID not found');
    }
    final response = await _makeApiRequest(choice, accessToken, userId);
    if (response.statusCode == 401) {
      final refreshSuccess = await funcs.refreshAccessToken();
      if (refreshSuccess) {
        accessToken = prefs.getString('auth_token');
        final retryResponse = await _makeApiRequest(
          choice,
          accessToken,
          userId,
        );
        if (retryResponse.statusCode == 200) {
          await _navigateToChoice(choice, prefs, context);
        } else {
          showSnack(context, '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö');
        }
      } else {
        showSnack(context, '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');
      }
    } else if (response.statusCode == 200) {
      await _navigateToChoice(choice, prefs, context);
    } else {
      showSnack(context, '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö');
    }
  } catch (e) {
    showSnack(context, '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞');
  }
}

class RegistrationFlow extends StatefulWidget {
  final double scaleX;
  final double scaleY;

  const RegistrationFlow({Key? key, required this.scaleX, required this.scaleY})
      : super(key: key);

  @override
  State<RegistrationFlow> createState() => _RegistrationFlowState();
}

class _RegistrationFlowState extends State<RegistrationFlow> {
  int currentStep =
      0; // 0 ‚Äì –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å, 1 ‚Äì –∫–æ–Ω—Ç–∞–∫—Ç—ã, 2 ‚Äì –∫–æ–¥, 3 ‚Äì –≤—ã–±–æ—Ä —Ä–æ–ª–∏
  final int totalSteps = 4;

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö, –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –Ω–∞ —à–∞–≥–µ 1
  String _userEmail = '';
  String _displayName = '';
  String _password = '';
  String _phone = '';
  void _nextStep() {
    setState(() {
      if (currentStep < totalSteps - 1) {
        currentStep++;
      }
    });
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å ContactsPanel.
  /// –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç —É—Å–ø–µ—à–Ω–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É.
  Future<void> _handleRegistrationDetails(
    String email,
    String displayName,
    String password,
    String phone,
  ) async {
    bool sent = await sendVerificationCodeFunction(context, email);
    if (sent) {
      _userEmail = email;
      _displayName = displayName;
      _password = password;
      _phone = phone;
      _nextStep();
    }
  }

  /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–¥–∞.
  /// –ï—Å–ª–∏ –∫–æ–¥ –≤–µ—Ä–Ω—ã–π, –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –∏ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ ‚Äì –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É.
  Future<void> _handleVerification(String token) async {
    bool registered = await registerFunction(
      context,
      token,
      _userEmail,
      _displayName,
      _password,
      _phone,
    );
    if (registered) {
      _nextStep();
    }
  }

  Widget _buildStep() {
    switch (currentStep) {
      case 0:
        return ConfidentialityPanel(
          key: ValueKey(currentStep),
          scaleX: widget.scaleX,
          scaleY: widget.scaleY,
          onNext: _nextStep,
        );
      case 1:
        return ContactsPanel(
          key: ValueKey(currentStep),
          scaleX: widget.scaleX,
          scaleY: widget.scaleY,
          onNext:
              _handleRegistrationDetails, // –ü–µ—Ä–µ–¥–∞—ë—Ç email, displayName –∏ password
        );
      case 2:
        return CodePanel(
          key: ValueKey(currentStep),
          scaleX: widget.scaleX,
          scaleY: widget.scaleY,
          email: _userEmail,
          onNext: _handleVerification, // –ü–µ—Ä–µ–¥–∞—ë—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–π token
        );
      case 3:
        return RoleSelectionPanel(
          key: ValueKey(currentStep),
          scaleX: widget.scaleX,
          scaleY: widget.scaleY,
          onExecutorPressed: () {
            // –î–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä "Looking for job"
            updateChoice('Looking for job', context);
          },
          onEmployerPressed: () {
            // –î–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä "Have vacancies"
            updateChoice('Have vacancies', context);
          },
        );
      default:
        return Container();
    }
  }

  @override
  Widget build(BuildContext context) {
    // –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä: —à–∏—Ä–∏–Ω–∞ –º–µ–Ω—è–µ—Ç—Å—è –æ—Ç 80 –¥–æ 396 –ø–æ —à–∞–≥–∞–º
    List<double> progressWidths = [
      80 * widget.scaleX, // –¥–ª—è ConfidentialityPanel
      160 * widget.scaleX, // –¥–ª—è ContactsPanel
      240 * widget.scaleX, // –¥–ª—è CodePanel
      396 * widget.scaleX, // –¥–ª—è RoleSelectionPanel
    ];
    double progressWidth = progressWidths[currentStep];

    return Column(
      children: [
        Expanded(
          child: AnimatedSwitcher(
            duration: const Duration(milliseconds: 300),
            transitionBuilder: (child, animation) {
              final int childStep = (child.key as ValueKey<int>).value;
              if (childStep == currentStep) {
                return SlideTransition(
                  position: Tween<Offset>(
                    begin: const Offset(1, 0), // –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤—ã–µ–∑–∂–∞–µ—Ç —Å–ø—Ä–∞–≤–∞
                    end: Offset.zero,
                  ).animate(animation),
                  child: child,
                );
              } else {
                return SlideTransition(
                  position: Tween<Offset>(
                    begin: const Offset(-1, 0), // —Å—Ç–∞—Ä—ã–π —ç–ª–µ–º–µ–Ω—Ç —É–µ–∑–∂–∞–µ—Ç –≤–ª–µ–≤–æ
                    end: Offset.zero,
                  ).animate(animation),
                  child: child,
                );
              }
            },
            child: _buildStep(),
          ),
        ),
        // –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –≤ –ª–µ–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É –ø–∞–Ω–µ–ª–∏
        Align(
          alignment: Alignment.centerLeft,
          child: Padding(
            padding: EdgeInsets.only(
              left: 0 * widget.scaleX,
              bottom: 0 * widget.scaleY,
            ),
            child: Container(
              width: progressWidth,
              height: 10 * widget.scaleY,
              color: const Color(0xFF00A80E),
            ),
          ),
        ),
      ],
    );
  }
}
