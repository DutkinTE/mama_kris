import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:http/http.dart' as http;
import 'package:mama_kris/utils/funcs.dart' as funcs;
import 'package:mama_kris/utils/login_logic.dart' as lgn;
import 'package:mama_kris/screens/login_sheet.dart';
import 'package:google_sign_in/google_sign_in.dart';
import 'package:mama_kris/constants/api_constants.dart';
import 'dart:io' show Platform;
import 'package:flutter_svg/flutter_svg.dart';
import 'package:flutter/foundation.dart'; // –¥–ª—è kDebugMode
import 'package:sign_in_with_apple/sign_in_with_apple.dart';

Future<void> signInWithApple(BuildContext context) async {
  try {
    if (kDebugMode)
      print('üçè [Apple Sign-In] –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Apple...');

    final credential = await SignInWithApple.getAppleIDCredential(
      scopes: [
        AppleIDAuthorizationScopes.email,
        AppleIDAuthorizationScopes.fullName,
      ],
    );

    if (kDebugMode) {
      print('‚úÖ [Apple Sign-In] –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç Apple ID');
      print('üîë Identity Token: ${credential.identityToken}');

      print('üìß Email: ${credential.email}');
      print('üë§ –ò–º—è: ${credential.givenName}');
      print('üë• –§–∞–º–∏–ª–∏—è: ${credential.familyName}');
    }
    final name = credential.givenName;
    final surname = credential.familyName;
    final identityToken = credential.identityToken;
    if (kDebugMode) {
      final parts = identityToken?.split('.');
      final payload = base64Url.normalize(parts![1]);
      final decoded = utf8.decode(base64Url.decode(payload));
      print('üîç Apple Token Payload: $decoded');
    }

    if (identityToken == null) {
      if (kDebugMode)
        print('‚ùå [Apple Sign-In] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å identityToken');
      lgn.showErrorSnackBar(
          context, '‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Apple Identity Token');
      return;
    }

    final url = Uri.parse('${kBaseUrl}auth/apple/login');
    final headers = {
      'Content-Type': 'application/json',
      'Accept': 'application/json',
    };
    String body;
    if (name != null || surname != null) {
      body = jsonEncode({
        'identityToken': identityToken,
        "userData": {"firstName": name, "lastName": surname},
      });
    } else if (name != null) {
      body = jsonEncode({
        'identityToken': identityToken,
        "userData": {"firstName": name, "lastName": ""},
      });
    } else if (surname != null) {
      body = jsonEncode({
        'identityToken': identityToken,
        "userData": {"firstName": "", "lastName": surname},
      });
    } else {
      body = jsonEncode({
        'identityToken': identityToken,
        "userData": {},
      });
    }

    if (kDebugMode)
      print('üì° [Apple Sign-In] –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –±—ç–∫–µ–Ω–¥ ‚Üí $url');
    final response = await http.post(url, headers: headers, body: body);

    if (kDebugMode) {
      print('üì¨ [Apple Sign-In] –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${response.statusCode}');
      print('üì¶ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: ${response.body}');
    }

    if (response.statusCode == 201) {
      final data = jsonDecode(response.body);
      print(data);
      final accessToken = data['accessToken'];
      final refreshToken = data['refreshToken'];
      final userId = data['userID'];
      final firstin = data['firstin'];

      if (accessToken != null && refreshToken != null) {
        final prefs = await SharedPreferences.getInstance();
        await prefs.setString('auth_token', accessToken);
        await prefs.setString('refresh_token', refreshToken);
        await prefs.setInt('user_id', userId);
        await prefs.setBool('isLogged', true);

        final fullName = credential.givenName ?? '';
        if (fullName.isNotEmpty) {
          await prefs.setString('name', fullName);
          await funcs.updateUserInfo(name: fullName);
          if (kDebugMode) print('üìõ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: $fullName');
        }

        final email = credential.email ?? '';
        if (email.isNotEmpty) {
          await prefs.setString('email', email);
          if (kDebugMode) print('üìß Email —Å–æ—Ö—Ä–∞–Ω—ë–Ω: $email');
        }

        final viewedCount = await funcs.getViewedCount(accessToken, userId);
        final likedCount = await funcs.getLikedCount(accessToken, userId);
        await prefs.setInt('viewed_count', viewedCount);
        await prefs.setInt('liked_count', likedCount);

        if (kDebugMode)
          print('üìä –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: $viewedCount, –õ–∞–π–∫–æ–≤: $likedCount');

        if (firstin) {
          showCheckboxSelectionPanel(context);
          return;
        }

        final String? currentPage = prefs.getString('current_page');
        if (currentPage == 'choice' || currentPage == null) {
          if (kDebugMode) print('‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É —Ä–æ–ª–∏');
          showRoleSelectionPanel(context);
        } else {
          if (kDebugMode) print('‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...');
          double scaleX = MediaQuery.of(context).size.width / 428;
          double scaleY = MediaQuery.of(context).size.height / 956;
          Widget nextPage =
              await lgn.determineNextPage(accessToken, userId, scaleX, scaleY);

          Navigator.of(context).pushAndRemoveUntil(
            PageRouteBuilder(
              transitionDuration: const Duration(milliseconds: 300),
              pageBuilder: (_, animation, __) => nextPage,
              transitionsBuilder: (_, animation, __, child) {
                final tween =
                    Tween(begin: const Offset(1.0, 0.0), end: Offset.zero)
                        .chain(CurveTween(curve: Curves.easeInOut));
                return SlideTransition(
                    position: animation.drive(tween), child: child);
              },
            ),
            (route) => false,
          );
        }
      } else {
        if (kDebugMode) print('‚ùå –¢–æ–∫–µ–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –æ—Ç–≤–µ—Ç–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
        lgn.showErrorSnackBar(context, '‚ùó –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: —Ç–æ–∫–µ–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
      }
    } else {
      if (kDebugMode)
        print('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ ${response.statusCode}');
      lgn.showErrorSnackBar(context, '‚ùó –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Apple');
    }
  } catch (e, stacktrace) {
    if (kDebugMode) {
      print('üõë –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≤—Ö–æ–¥–µ —á–µ—Ä–µ–∑ Apple: $e');
      print('üîç Stacktrace: $stacktrace');
    }
    lgn.showErrorSnackBar(
        context, '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Apple. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
  }
}

final GoogleSignIn _googleSignIn = GoogleSignIn(
  scopes: ['openid', 'email', 'profile'],
  serverClientId:
      // '86099763542-a94uom1ijlqu6jp263dtc43dvgd540np.apps.googleusercontent.com',
      '86099763542-9tgb2dqc63hj0utf8fc9mvve0fplc8e1.apps.googleusercontent.com',
);

Future<void> signInWithGoogle(BuildContext context) async {
  try {
    // print('üîê [Google Sign-In] –°—Ç–∞—Ä—Ç –≤—Ö–æ–¥–∞');

    final GoogleSignInAccount? googleUser = await _googleSignIn.signIn();
    if (googleUser == null) {
      // print('‚ùå [Google Sign-In] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –≤—Ö–æ–¥');
      return;
    }

    final GoogleSignInAuthentication googleAuth =
        await googleUser.authentication;

    final String? idToken = googleAuth.idToken;
    if (idToken == null) {
      // print('‚ùó [Google Sign-In] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID —Ç–æ–∫–µ–Ω');
      return;
    }

    // print('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${googleUser.displayName} (${googleUser.email})');
    // print('üîë ID Token: ${idToken.substring(0, 30)}...');

    // –ó–∞–ø—Ä–æ—Å –Ω–∞ –±—ç–∫–µ–Ω–¥
    final url = Uri.parse('${kBaseUrl}auth/google/login');
    final headers = {
      'Content-Type': 'application/json',
      'Accept': '*/*',
      'provider': 'ios',
    };
    final body = jsonEncode({'idToken': idToken});

    final response = await http.post(url, headers: headers, body: body);

    // print('üì° [–ë—ç–∫–µ–Ω–¥] POST ${url.path} ‚Üí –°—Ç–∞—Ç—É—Å: ${response.statusCode}');
    // print('üì¶ –û—Ç–≤–µ—Ç: ${response.body}');

    if (response.statusCode == 201) {
      final data = jsonDecode(response.body);
      print(data);
      final accessToken = data['accessToken'];
      final refreshToken = data['refreshToken'];
      final userId = data['userId'];
      final firstin = data['firstin'];

      if (accessToken != null && refreshToken != null) {
        final prefs = await SharedPreferences.getInstance();
        await prefs.setString('auth_token', accessToken);
        await prefs.setString('refresh_token', refreshToken);
        await prefs.setInt('user_id', userId);
        await prefs.setBool('isLogged', true);
        if (googleUser.displayName != null) {
          final name = googleUser.displayName!;
          await prefs.setString('name', name);
          await funcs.updateUserInfo(name: name);
          // print('üìõ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${googleUser.displayName}');
        }

        await prefs.setString('email', googleUser.email);

        final viewedCount = await funcs.getViewedCount(accessToken, userId);
        final likedCount = await funcs.getLikedCount(accessToken, userId);
        await prefs.setInt('viewed_count', viewedCount);
        await prefs.setInt('liked_count', likedCount);

        if (firstin) {
          showCheckboxSelectionPanel(context);
          return;
        }

        // print(
        //     '‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥. UserID: $userId, –õ–∞–π–∫–æ–≤: $likedCount, –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: $viewedCount');

        final String? currentPage = prefs.getString('current_page');
        if (currentPage == 'choice' || currentPage == null) {
          print(currentPage);
          showRoleSelectionPanel(context);
        } else {
          double scaleX = MediaQuery.of(context).size.width / 428;
          double scaleY = MediaQuery.of(context).size.height / 956;
          Widget nextPage =
              await lgn.determineNextPage(accessToken, userId, scaleX, scaleY);
          print(nextPage);
          Navigator.of(context).pushAndRemoveUntil(
            PageRouteBuilder(
              transitionDuration: const Duration(milliseconds: 300),
              pageBuilder: (_, animation, __) => nextPage,
              transitionsBuilder: (_, animation, __, child) {
                final tween =
                    Tween(begin: const Offset(1.0, 0.0), end: Offset.zero)
                        .chain(CurveTween(curve: Curves.easeInOut));
                return SlideTransition(
                    position: animation.drive(tween), child: child);
              },
            ),
            (route) => false,
          );
        }
      } else {
        lgn.showErrorSnackBar(context, '‚ùó –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: —Ç–æ–∫–µ–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
      }
    } else {
      lgn.showErrorSnackBar(context, '‚ùó –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Google');
    }
  } catch (e) {
    // print('üõë –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Google: $e');
    // print('üîç Stacktrace: $stacktrace');
    lgn.showErrorSnackBar(context, '–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
  }
}

Widget buildSocialButtons({
  required double top,
  required double scaleX,
  required double scaleY,
  required VoidCallback onGooglePressed,
  required VoidCallback onApplePressed,
  required BuildContext context,
}) {
  if (Platform.isIOS) {
    return Stack(
      children: [
        // Google
        Positioned(
          top: top * scaleY,
          left: 144 * scaleX,
          child: _circleButton(
            asset: 'assets/welcome_screen/google.svg',
            onPressed: onGooglePressed,
            scaleX: scaleX,
            scaleY: scaleY,
            backgroundColor: Colors.transparent,
          ),
        ),
        // Apple
        Positioned(
          top: top * scaleY,
          left: 234 * scaleX,
          child: SizedBox(
            width: 50 * scaleX,
            height: 50 * scaleY,
            child: ElevatedButton(
              onPressed: onApplePressed,
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.black,
                shape: const CircleBorder(),
                padding: EdgeInsets.zero, // —É–±–∏—Ä–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã
                elevation: 0,
              ),
              child: Center(
                child: Icon(
                  Icons.apple,
                  color: Colors.white,
                  size: 36 * scaleX,
                ),
              ),
            ),
          ),
        ),
      ],
    );
  } else if (Platform.isAndroid) {
    return Align(
      alignment: Alignment.topCenter,
      child: Padding(
        padding: EdgeInsets.only(top: top * scaleY),
        child: _circleButton(
          asset: 'assets/welcome_screen/google.svg',
          onPressed: onGooglePressed,
          scaleX: scaleX,
          scaleY: scaleY,
          backgroundColor: Colors.transparent,
        ),
      ),
    );
  } else {
    return const SizedBox.shrink(); // –ù–∏—á–µ–≥–æ, –µ—Å–ª–∏ –Ω–µ iOS/Android
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
Widget _circleButton({
  required String asset,
  required VoidCallback onPressed,
  required double scaleX,
  required double scaleY,
  required Color backgroundColor,
}) {
  return SizedBox(
    width: 50 * scaleX,
    height: 50 * scaleY,
    child: ElevatedButton(
      onPressed: onPressed,
      style: ElevatedButton.styleFrom(
        shape: const CircleBorder(),
        backgroundColor: backgroundColor,
        padding: EdgeInsets.zero,
        elevation: 0,
      ),
      child: SvgPicture.asset(
        asset,
        width: 50 * scaleX,
        height: 50 * scaleY,
        fit: BoxFit.contain,
        placeholderBuilder: (context) => const CircularProgressIndicator(),
      ),
    ),
  );
}

// üëâ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ Google
void onGooglePressed(context) {
  signInWithGoogle(context);
  // print("Google –Ω–∞–∂–∞—Ç");
  // TODO: –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Google
}

// üëâ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ Apple
void onApplePressed(context) {
  signInWithApple(context);
  print("Apple –Ω–∞–∂–∞—Ç");
  // TODO: –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Apple
}
