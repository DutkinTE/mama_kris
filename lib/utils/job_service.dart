import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';
import 'package:mama_kris/utils/funcs.dart' as funcs;
import 'package:mama_kris/constants/api_constants.dart';

class JobService {
  static Future<String?> _getAccessToken() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getString('auth_token');
  }

  static Future<int?> _getUserId() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getInt('user_id');
  }

  static Future<int?> createOrUpdateContact({
    required Map<String, dynamic> newContactData,
    Map<String, dynamic>? oldContactData,
    Function(int)? onNewContactCreatedBeforeDeletingOld,
  }) async {
    // final prefs = await SharedPreferences.getInstance();
    final token = await _getAccessToken();
    final userId = await _getUserId();
    if (token == null || userId == null) return null;

    final bool hasChanged = oldContactData == null ||
        jsonEncode(_cleanContactMap(newContactData)) !=
            jsonEncode(_cleanContactMap(oldContactData));

    if (!hasChanged && oldContactData != null) {
      // print(
      //   "üîÑ –ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –∏–∑–º–µ–Ω—ë–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π: ${oldContactData['contactsID']}",
      // );
      return oldContactData['contactsID'];
    }

    // print("üü¢ –°–û–ó–î–ê–ù–ò–ï –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞");
    // print("‚û°Ô∏è URL: ${kBaseUrl}contacts/$userId");
    // print("‚û°Ô∏è Headers: Authorization: Bearer $token");
    // print("‚û°Ô∏è Body: ${jsonEncode(newContactData)}");

    final createResponse = await http.post(
      Uri.parse('${kBaseUrl}contacts/$userId'),
      headers: {
        'Authorization': 'Bearer $token',
        'Content-Type': 'application/json',
      },
      body: jsonEncode(newContactData),
    );

    if (createResponse.statusCode == 401) {
      final refreshed = await funcs.refreshAccessToken();
      if (refreshed) {
        return createOrUpdateContact(
          newContactData: newContactData,
          oldContactData: oldContactData,
          onNewContactCreatedBeforeDeletingOld:
              onNewContactCreatedBeforeDeletingOld,
        );
      }
    }

    // print("üì• –û—Ç–≤–µ—Ç: ${createResponse.statusCode}");
    // print("üì¶ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: ${createResponse.body}");

    if (createResponse.statusCode == 201) {
      final decoded = jsonDecode(createResponse.body);
      final newContactId = decoded['contactsID'];

      // –°–æ–æ–±—â–∞–µ–º –Ω–∞—Ä—É–∂—É, —á—Ç–æ –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é –¥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ
      if (onNewContactCreatedBeforeDeletingOld != null) {
        onNewContactCreatedBeforeDeletingOld(newContactId);
      }

      return newContactId;
    }

    return null;
  }

  static Future<bool> deleteContact(int contactId) async {
    final token = await _getAccessToken();
    final userId = await _getUserId();
    if (token == null || userId == null) return false;

    // print("üóë –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç ID: $contactId");

    final response = await http.delete(
      Uri.parse('${kBaseUrl}contacts/$userId/$contactId'),
      headers: {'Authorization': 'Bearer $token'},
    );

    if (response.statusCode == 401) {
      final refreshed = await funcs.refreshAccessToken();
      if (refreshed) return deleteContact(contactId);
    }

    // print("üì• –û—Ç–≤–µ—Ç (—É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞): ${response.statusCode}");
    return response.statusCode == 200;
  }

  /// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏.
  /// –¢–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JSON-–æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (—Å –ø–æ–ª—è–º–∏ jobID, status –∏ —Ç.–¥.)
  static Future<Map<String, dynamic>?> createOrUpdateJob({
    required Map<String, dynamic> jobData,
    int? jobId,
  }) async {
    final token = await _getAccessToken();
    final userId = await _getUserId();
    if (token == null || userId == null) return null;

    final uri = jobId == null
        ? Uri.parse('${kBaseUrl}jobs/user/$userId')
        : Uri.parse('${kBaseUrl}jobs/user/$userId/job/$jobId');

    final method = jobId == null ? http.post : http.put;

    if (jobId == null) {
      // print("üü¢ –°–û–ó–î–ê–ù–ò–ï –≤–∞–∫–∞–Ω—Å–∏–∏");
    } else {
      // print("üîÅ –û–ë–ù–û–í–õ–ï–ù–ò–ï –≤–∞–∫–∞–Ω—Å–∏–∏ (ID: $jobId)");
    }
    // print("‚û°Ô∏è URL: $uri");
    // print("‚û°Ô∏è Headers: Authorization: Bearer $token");
    // print("‚û°Ô∏è Body: ${jsonEncode(jobData)}");

    final response = await method(
      uri,
      headers: {
        'Authorization': 'Bearer $token',
        'Content-Type': 'application/json',
      },
      body: jsonEncode(jobData),
    );

    if (response.statusCode == 401) {
      final refreshed = await funcs.refreshAccessToken();
      if (refreshed) return createOrUpdateJob(jobData: jobData, jobId: jobId);
    }

    // print("üì• –û—Ç–≤–µ—Ç: ${response.statusCode}");
    // print("üì¶ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: ${response.body}");

    if (response.statusCode == 200 || response.statusCode == 201) {
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω—ã–π JSON-–æ—Ç–≤–µ—Ç, –≤–∫–ª—é—á–∞—é—â–∏–π jobID, status –∏ –¥—Ä—É–≥–∏–µ –ø–æ–ª—è
      return jsonDecode(response.body);
    }

    return null;
  }

  static Future<bool> setJobSpheres(int jobId, List<int> sphereIDs) async {
    final token = await _getAccessToken();
    final userId = await _getUserId();
    if (token == null || userId == null) return false;

    final url = Uri.parse('${kBaseUrl}job-spheres/$userId/$jobId/spheres');

    // print("üîó –ü—Ä–∏–≤—è–∑–∫–∞ —Å—Ñ–µ—Ä –∫ –≤–∞–∫–∞–Ω—Å–∏–∏ $jobId");
    // print("‚û°Ô∏è URL: $url");
    // print("‚û°Ô∏è Body: ${jsonEncode({'sphereIDs': sphereIDs})}");

    final response = await http.post(
      url,
      headers: {
        'Authorization': 'Bearer $token',
        'Content-Type': 'application/json',
      },
      body: jsonEncode({'sphereIDs': sphereIDs}),
    );

    if (response.statusCode == 401) {
      final refreshed = await funcs.refreshAccessToken();
      if (refreshed) return setJobSpheres(jobId, sphereIDs);
    }

    // print("üì• –û—Ç–≤–µ—Ç (job-spheres): ${response.statusCode}");
    return response.statusCode == 200 || response.statusCode == 201;
  }

  static Map<String, dynamic> _cleanContactMap(Map<String, dynamic> map) {
    return Map.from(map)
      ..removeWhere(
        (key, value) => value == null || value.toString().trim().isEmpty,
      );
  }
}
